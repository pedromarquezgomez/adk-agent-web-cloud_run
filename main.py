import os
import uvicorn
from fastapi import FastAPI
from google.adk.cli.fast_api import get_fast_api_app

# Configuraci√≥n b√°sica
AGENTS_DIR = os.path.dirname(os.path.abspath(__file__))
SESSION_DB_URL = "sqlite:///./sessions.db"
ALLOWED_ORIGINS = ["*"]
SERVE_WEB_INTERFACE = True

print("üîß Iniciando configuraci√≥n de ADK...")

# Crear aplicaci√≥n b√°sica primero para health check
base_app = FastAPI(title="ADK Agent Health Check")

@base_app.get("/health")
async def health_check():
    """Health check endpoint para Cloud Run"""
    return {"status": "healthy", "service": "adk-agent"}

@base_app.get("/")
async def root():
    """Root endpoint redirect"""
    return {"message": "ADK Agent is running", "status": "ok"}

try:
    print("üöÄ Configurando ADK...")
    # Llama a la funci√≥n del ADK para obtener la aplicaci√≥n FastAPI
    app = get_fast_api_app(
        agents_dir=AGENTS_DIR,
        session_service_uri=SESSION_DB_URL,
        allow_origins=ALLOWED_ORIGINS,
        web=SERVE_WEB_INTERFACE,
    )
    print("‚úÖ ADK configurado exitosamente")
except Exception as e:
    print(f"‚ùå Error configurando ADK: {e}")
    # Usar aplicaci√≥n b√°sica como fallback
    app = base_app

if __name__ == "__main__":
    # Configuraci√≥n optimizada para Cloud Run
    port = int(os.environ.get("PORT", 8000))
    print(f"üöÄ Iniciando servidor en puerto {port}")
    
    # Inicia el servidor con configuraci√≥n optimizada para Cloud Run
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        access_log=False,  # Reduce overhead en producci√≥n
        timeout_keep_alive=120,  # Mantiene conexiones vivas m√°s tiempo
    )